
/Users/jameslockwood/Desktop/OCN479/Blink/target/2.3.0/argon/Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001094  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d50b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e530  000d50b4  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000254  2003e59c  2003e59c  0002e59c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5120  000d5120  00025120  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5148  000d5148  00025148  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001088b6  00000000  00000000  0002514c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012004  00000000  00000000  0012da02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000212f3  00000000  00000000  0013fa06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002100  00000000  00000000  00160cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006150  00000000  00000000  00162df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032f7a  00000000  00000000  00168f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d086  00000000  00000000  0019bec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101b86  00000000  00000000  001c8f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005720  00000000  00000000  002caad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 febf 	bl	d4db0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 fec7 	bl	d4dcc <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e530 	.word	0x2003e530
   d4048:	000d50b4 	.word	0x000d50b4
   d404c:	2003e59c 	.word	0x2003e59c
   d4050:	2003e59c 	.word	0x2003e59c
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fdc5 	bl	d4bec <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5088 	.word	0x000d5088
   d407c:	000d50ac 	.word	0x000d50ac

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b813 	b.w	d40aa <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f814 	bl	d40b2 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bd65 	b.w	d4b5c <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 b9c9 	b.w	d4428 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 b9cf 	b.w	d4438 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <setup>:
  // Particle.disconnect();
  // WiFi.off();
	// In order to set a pin, you must tell Device OS that the pin is
	// an OUTPUT pin. This is often done from setup() since you only need
	// to do it once.
	pinMode(MY_LED, OUTPUT);
   d40aa:	2101      	movs	r1, #1
   d40ac:	2007      	movs	r0, #7
   d40ae:	f000 be0d 	b.w	d4ccc <pinMode>

000d40b2 <loop>:
}

// The loop() method is called frequently.
void loop()
{
   d40b2:	b508      	push	{r3, lr}
	// Turn on the LED
	digitalWrite(MY_LED, HIGH);
   d40b4:	2101      	movs	r1, #1
   d40b6:	2007      	movs	r0, #7
   d40b8:	f000 fe19 	bl	d4cee <digitalWrite>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   d40bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d40c0:	f000 f9ca 	bl	d4458 <delay>

	// Leave it on for one second
	delay(3s);

	// Turn it off
	digitalWrite(MY_LED, LOW);
   d40c4:	2007      	movs	r0, #7
   d40c6:	2100      	movs	r1, #0
   d40c8:	f000 fe11 	bl	d4cee <digitalWrite>

	// Wait one more second
	delay(1s);

	// And repeat!
   d40cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40d4:	f000 b9c0 	b.w	d4458 <delay>

000d40d8 <_GLOBAL__sub_I_SystemMode>:
   d40d8:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d40da:	2001      	movs	r0, #1
   d40dc:	2100      	movs	r1, #0
   d40de:	f000 f91f 	bl	d4320 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d40e2:	4b06      	ldr	r3, [pc, #24]	; (d40fc <_GLOBAL__sub_I_SystemMode+0x24>)
   d40e4:	2200      	movs	r2, #0
   d40e6:	601a      	str	r2, [r3, #0]
   d40e8:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d40ea:	719a      	strb	r2, [r3, #6]
   d40ec:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d40f0:	609a      	str	r2, [r3, #8]
   d40f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d40f6:	2002      	movs	r0, #2
   d40f8:	f000 b902 	b.w	d4300 <set_system_mode>
   d40fc:	2003e59c 	.word	0x2003e59c

000d4100 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4100:	b508      	push	{r3, lr}
   d4102:	4b02      	ldr	r3, [pc, #8]	; (d410c <os_mutex_recursive_create+0xc>)
   d4104:	681b      	ldr	r3, [r3, #0]
   d4106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4108:	9301      	str	r3, [sp, #4]
   d410a:	bd08      	pop	{r3, pc}
   d410c:	00030248 	.word	0x00030248

000d4110 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4110:	b508      	push	{r3, lr}
   d4112:	4b02      	ldr	r3, [pc, #8]	; (d411c <HAL_RNG_GetRandomNumber+0xc>)
   d4114:	681b      	ldr	r3, [r3, #0]
   d4116:	685b      	ldr	r3, [r3, #4]
   d4118:	9301      	str	r3, [sp, #4]
   d411a:	bd08      	pop	{r3, pc}
   d411c:	00030218 	.word	0x00030218

000d4120 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4120:	b508      	push	{r3, lr}
   d4122:	4b02      	ldr	r3, [pc, #8]	; (d412c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4124:	681b      	ldr	r3, [r3, #0]
   d4126:	695b      	ldr	r3, [r3, #20]
   d4128:	9301      	str	r3, [sp, #4]
   d412a:	bd08      	pop	{r3, pc}
   d412c:	00030218 	.word	0x00030218

000d4130 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4130:	b508      	push	{r3, lr}
   d4132:	4b02      	ldr	r3, [pc, #8]	; (d413c <HAL_Pin_Mode+0xc>)
   d4134:	681b      	ldr	r3, [r3, #0]
   d4136:	689b      	ldr	r3, [r3, #8]
   d4138:	9301      	str	r3, [sp, #4]
   d413a:	bd08      	pop	{r3, pc}
   d413c:	0003022c 	.word	0x0003022c

000d4140 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4140:	b508      	push	{r3, lr}
   d4142:	4b02      	ldr	r3, [pc, #8]	; (d414c <HAL_Get_Pin_Mode+0xc>)
   d4144:	681b      	ldr	r3, [r3, #0]
   d4146:	68db      	ldr	r3, [r3, #12]
   d4148:	9301      	str	r3, [sp, #4]
   d414a:	bd08      	pop	{r3, pc}
   d414c:	0003022c 	.word	0x0003022c

000d4150 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4150:	b508      	push	{r3, lr}
   d4152:	4b02      	ldr	r3, [pc, #8]	; (d415c <HAL_GPIO_Write+0xc>)
   d4154:	681b      	ldr	r3, [r3, #0]
   d4156:	691b      	ldr	r3, [r3, #16]
   d4158:	9301      	str	r3, [sp, #4]
   d415a:	bd08      	pop	{r3, pc}
   d415c:	0003022c 	.word	0x0003022c

000d4160 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4160:	b508      	push	{r3, lr}
   d4162:	4b02      	ldr	r3, [pc, #8]	; (d416c <hal_i2c_write+0xc>)
   d4164:	681b      	ldr	r3, [r3, #0]
   d4166:	6a1b      	ldr	r3, [r3, #32]
   d4168:	9301      	str	r3, [sp, #4]
   d416a:	bd08      	pop	{r3, pc}
   d416c:	00030228 	.word	0x00030228

000d4170 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4170:	b508      	push	{r3, lr}
   d4172:	4b02      	ldr	r3, [pc, #8]	; (d417c <hal_i2c_available+0xc>)
   d4174:	681b      	ldr	r3, [r3, #0]
   d4176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4178:	9301      	str	r3, [sp, #4]
   d417a:	bd08      	pop	{r3, pc}
   d417c:	00030228 	.word	0x00030228

000d4180 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4180:	b508      	push	{r3, lr}
   d4182:	4b02      	ldr	r3, [pc, #8]	; (d418c <hal_i2c_read+0xc>)
   d4184:	681b      	ldr	r3, [r3, #0]
   d4186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4188:	9301      	str	r3, [sp, #4]
   d418a:	bd08      	pop	{r3, pc}
   d418c:	00030228 	.word	0x00030228

000d4190 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <hal_i2c_peek+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	00030228 	.word	0x00030228

000d41a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <hal_i2c_flush+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	00030228 	.word	0x00030228

000d41b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <hal_i2c_is_enabled+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	00030228 	.word	0x00030228

000d41c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <hal_i2c_init+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030228 	.word	0x00030228

000d41d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <inet_inet_ntop+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	695b      	ldr	r3, [r3, #20]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	00030264 	.word	0x00030264

000d41e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <netdb_freeaddrinfo+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	689b      	ldr	r3, [r3, #8]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030268 	.word	0x00030268

000d41f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <netdb_getaddrinfo+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	68db      	ldr	r3, [r3, #12]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030268 	.word	0x00030268

000d4200 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <hal_spi_init+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	69db      	ldr	r3, [r3, #28]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030230 	.word	0x00030230

000d4210 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <hal_spi_is_enabled+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	6a1b      	ldr	r3, [r3, #32]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030230 	.word	0x00030230

000d4220 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <hal_usart_init+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	681b      	ldr	r3, [r3, #0]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	0003023c 	.word	0x0003023c

000d4230 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <hal_usart_write+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	68db      	ldr	r3, [r3, #12]
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	0003023c 	.word	0x0003023c

000d4240 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <hal_usart_available+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	691b      	ldr	r3, [r3, #16]
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	0003023c 	.word	0x0003023c

000d4250 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <hal_usart_read+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	0003023c 	.word	0x0003023c

000d4260 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <hal_usart_peek+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	699b      	ldr	r3, [r3, #24]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	0003023c 	.word	0x0003023c

000d4270 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <hal_usart_flush+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	69db      	ldr	r3, [r3, #28]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	0003023c 	.word	0x0003023c

000d4280 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <hal_usart_is_enabled+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	6a1b      	ldr	r3, [r3, #32]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003023c 	.word	0x0003023c

000d4290 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <hal_usart_available_data_for_write+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003023c 	.word	0x0003023c

000d42a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_USB_USART_Init+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	681b      	ldr	r3, [r3, #0]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003024c 	.word	0x0003024c

000d42b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_USB_USART_Available_Data+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	691b      	ldr	r3, [r3, #16]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003024c 	.word	0x0003024c

000d42c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	695b      	ldr	r3, [r3, #20]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003024c 	.word	0x0003024c

000d42d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_USB_USART_Receive_Data+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	699b      	ldr	r3, [r3, #24]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	0003024c 	.word	0x0003024c

000d42e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_USB_USART_Send_Data+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	69db      	ldr	r3, [r3, #28]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	0003024c 	.word	0x0003024c

000d42f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_USB_USART_Flush_Data+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6a1b      	ldr	r3, [r3, #32]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	0003024c 	.word	0x0003024c

000d4300 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <set_system_mode+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	685b      	ldr	r3, [r3, #4]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030220 	.word	0x00030220

000d4310 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <system_delay_ms+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	695b      	ldr	r3, [r3, #20]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030220 	.word	0x00030220

000d4320 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <system_thread_set_state+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030220 	.word	0x00030220

000d4330 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b03      	ldr	r3, [pc, #12]	; (d4340 <system_ctrl_set_app_request_handler+0x10>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d433a:	9301      	str	r3, [sp, #4]
   d433c:	bd08      	pop	{r3, pc}
   d433e:	0000      	.short	0x0000
   d4340:	00030220 	.word	0x00030220

000d4344 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b03      	ldr	r3, [pc, #12]	; (d4354 <system_ctrl_set_result+0x10>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d434e:	9301      	str	r3, [sp, #4]
   d4350:	bd08      	pop	{r3, pc}
   d4352:	0000      	.short	0x0000
   d4354:	00030220 	.word	0x00030220

000d4358 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <spark_set_random_seed_from_cloud_handler+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030244 	.word	0x00030244

000d4368 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <network_connect+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	685b      	ldr	r3, [r3, #4]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030240 	.word	0x00030240

000d4378 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <network_connecting+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	689b      	ldr	r3, [r3, #8]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030240 	.word	0x00030240

000d4388 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <network_disconnect+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	68db      	ldr	r3, [r3, #12]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030240 	.word	0x00030240

000d4398 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <network_ready+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	691b      	ldr	r3, [r3, #16]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030240 	.word	0x00030240

000d43a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <network_on+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	695b      	ldr	r3, [r3, #20]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030240 	.word	0x00030240

000d43b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <network_off+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	699b      	ldr	r3, [r3, #24]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030240 	.word	0x00030240

000d43c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <network_listen+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	69db      	ldr	r3, [r3, #28]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030240 	.word	0x00030240

000d43d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <network_listening+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6a1b      	ldr	r3, [r3, #32]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030240 	.word	0x00030240

000d43e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <network_set_listen_timeout+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030240 	.word	0x00030240

000d43f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <network_get_listen_timeout+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030240 	.word	0x00030240

000d4408 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <network_is_on+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030240 	.word	0x00030240

000d4418 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <network_is_off+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030240 	.word	0x00030240

000d4428 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <malloc+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	681b      	ldr	r3, [r3, #0]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003021c 	.word	0x0003021c

000d4438 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <free+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003021c 	.word	0x0003021c

000d4448 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <newlib_impure_ptr_callback+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003021c 	.word	0x0003021c

000d4458 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4458:	2100      	movs	r1, #0
   d445a:	f7ff bf59 	b.w	d4310 <system_delay_ms>
	...

000d4460 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4460:	4802      	ldr	r0, [pc, #8]	; (d446c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4462:	2300      	movs	r3, #0
   d4464:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4466:	f7ff be4b 	b.w	d4100 <os_mutex_recursive_create>
   d446a:	bf00      	nop
   d446c:	2003e5a8 	.word	0x2003e5a8

000d4470 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4470:	2200      	movs	r2, #0
   d4472:	6840      	ldr	r0, [r0, #4]
   d4474:	4611      	mov	r1, r2
   d4476:	f7ff bfaf 	b.w	d43d8 <network_listening>

000d447a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d447a:	2200      	movs	r2, #0
   d447c:	6840      	ldr	r0, [r0, #4]
   d447e:	4611      	mov	r1, r2
   d4480:	f7ff bfba 	b.w	d43f8 <network_get_listen_timeout>

000d4484 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4484:	6840      	ldr	r0, [r0, #4]
   d4486:	2200      	movs	r2, #0
   d4488:	f7ff bfae 	b.w	d43e8 <network_set_listen_timeout>

000d448c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d448c:	6840      	ldr	r0, [r0, #4]
   d448e:	2200      	movs	r2, #0
   d4490:	f081 0101 	eor.w	r1, r1, #1
   d4494:	f7ff bf98 	b.w	d43c8 <network_listen>

000d4498 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4498:	2300      	movs	r3, #0
   d449a:	6840      	ldr	r0, [r0, #4]
   d449c:	461a      	mov	r2, r3
   d449e:	4619      	mov	r1, r3
   d44a0:	f7ff bf8a 	b.w	d43b8 <network_off>

000d44a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d44a4:	2300      	movs	r3, #0
   d44a6:	6840      	ldr	r0, [r0, #4]
   d44a8:	461a      	mov	r2, r3
   d44aa:	4619      	mov	r1, r3
   d44ac:	f7ff bf7c 	b.w	d43a8 <network_on>

000d44b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d44b0:	2200      	movs	r2, #0
   d44b2:	6840      	ldr	r0, [r0, #4]
   d44b4:	4611      	mov	r1, r2
   d44b6:	f7ff bf6f 	b.w	d4398 <network_ready>

000d44ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d44ba:	2200      	movs	r2, #0
   d44bc:	6840      	ldr	r0, [r0, #4]
   d44be:	4611      	mov	r1, r2
   d44c0:	f7ff bf5a 	b.w	d4378 <network_connecting>

000d44c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d44c4:	6840      	ldr	r0, [r0, #4]
   d44c6:	2200      	movs	r2, #0
   d44c8:	2102      	movs	r1, #2
   d44ca:	f7ff bf5d 	b.w	d4388 <network_disconnect>

000d44ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d44ce:	2300      	movs	r3, #0
   d44d0:	6840      	ldr	r0, [r0, #4]
   d44d2:	461a      	mov	r2, r3
   d44d4:	f7ff bf48 	b.w	d4368 <network_connect>

000d44d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d44d8:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d44da:	2203      	movs	r2, #3
   d44dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d44de:	4a02      	ldr	r2, [pc, #8]	; (d44e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d44e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d44e2:	4770      	bx	lr
   d44e4:	2003e5ac 	.word	0x2003e5ac
   d44e8:	000d4f1c 	.word	0x000d4f1c

000d44ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d44ec:	4770      	bx	lr

000d44ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d44ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44f0:	4606      	mov	r6, r0
   d44f2:	4615      	mov	r5, r2
   d44f4:	460c      	mov	r4, r1
   d44f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d44f8:	42bc      	cmp	r4, r7
   d44fa:	d006      	beq.n	d450a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d44fc:	6833      	ldr	r3, [r6, #0]
   d44fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4502:	689b      	ldr	r3, [r3, #8]
   d4504:	4630      	mov	r0, r6
   d4506:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4508:	e7f6      	b.n	d44f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d450a:	4628      	mov	r0, r5
   d450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d450e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d450e:	7c00      	ldrb	r0, [r0, #16]
   d4510:	2200      	movs	r2, #0
   d4512:	f7ff be25 	b.w	d4160 <hal_i2c_write>

000d4516 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4516:	7c00      	ldrb	r0, [r0, #16]
   d4518:	2100      	movs	r1, #0
   d451a:	f7ff be29 	b.w	d4170 <hal_i2c_available>

000d451e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d451e:	7c00      	ldrb	r0, [r0, #16]
   d4520:	2100      	movs	r1, #0
   d4522:	f7ff be2d 	b.w	d4180 <hal_i2c_read>

000d4526 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4526:	7c00      	ldrb	r0, [r0, #16]
   d4528:	2100      	movs	r1, #0
   d452a:	f7ff be31 	b.w	d4190 <hal_i2c_peek>

000d452e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d452e:	7c00      	ldrb	r0, [r0, #16]
   d4530:	2100      	movs	r1, #0
   d4532:	f7ff be35 	b.w	d41a0 <hal_i2c_flush>

000d4536 <_ZN7TwoWireD0Ev>:
   d4536:	b510      	push	{r4, lr}
   d4538:	2114      	movs	r1, #20
   d453a:	4604      	mov	r4, r0
   d453c:	f000 fc2e 	bl	d4d9c <_ZdlPvj>
   d4540:	4620      	mov	r0, r4
   d4542:	bd10      	pop	{r4, pc}

000d4544 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4544:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d454a:	4604      	mov	r4, r0
   d454c:	4608      	mov	r0, r1
   d454e:	2100      	movs	r1, #0
   d4550:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4554:	4b03      	ldr	r3, [pc, #12]	; (d4564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4556:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4558:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d455a:	4611      	mov	r1, r2
   d455c:	f7ff fe30 	bl	d41c0 <hal_i2c_init>
}
   d4560:	4620      	mov	r0, r4
   d4562:	bd10      	pop	{r4, pc}
   d4564:	000d4f58 	.word	0x000d4f58

000d4568 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4568:	4770      	bx	lr

000d456a <_ZN9IPAddressD0Ev>:
   d456a:	b510      	push	{r4, lr}
   d456c:	2118      	movs	r1, #24
   d456e:	4604      	mov	r4, r0
   d4570:	f000 fc14 	bl	d4d9c <_ZdlPvj>
   d4574:	4620      	mov	r0, r4
   d4576:	bd10      	pop	{r4, pc}

000d4578 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4578:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d457a:	7d03      	ldrb	r3, [r0, #20]
   d457c:	2b06      	cmp	r3, #6
{
   d457e:	b08d      	sub	sp, #52	; 0x34
   d4580:	460e      	mov	r6, r1
   d4582:	f100 0704 	add.w	r7, r0, #4
   d4586:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d458a:	d012      	beq.n	d45b2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d458c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4590:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4594:	220a      	movs	r2, #10
   d4596:	4630      	mov	r0, r6
   d4598:	f000 f93b 	bl	d4812 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d459c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d459e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d45a0:	d019      	beq.n	d45d6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d45a2:	2c00      	cmp	r4, #0
   d45a4:	d0f4      	beq.n	d4590 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d45a6:	212e      	movs	r1, #46	; 0x2e
   d45a8:	4630      	mov	r0, r6
   d45aa:	f000 f92f 	bl	d480c <_ZN5Print5printEc>
   d45ae:	4404      	add	r4, r0
   d45b0:	e7ee      	b.n	d4590 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d45b2:	232f      	movs	r3, #47	; 0x2f
   d45b4:	466a      	mov	r2, sp
   d45b6:	4639      	mov	r1, r7
   d45b8:	200a      	movs	r0, #10
		buf[0] = 0;
   d45ba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d45be:	f7ff fe07 	bl	d41d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d45c2:	4668      	mov	r0, sp
   d45c4:	f000 fc2e 	bl	d4e24 <strlen>
   d45c8:	6833      	ldr	r3, [r6, #0]
   d45ca:	4602      	mov	r2, r0
   d45cc:	68db      	ldr	r3, [r3, #12]
   d45ce:	4669      	mov	r1, sp
   d45d0:	4630      	mov	r0, r6
   d45d2:	4798      	blx	r3
   d45d4:	4604      	mov	r4, r0
    }
    return n;
}
   d45d6:	4620      	mov	r0, r4
   d45d8:	b00d      	add	sp, #52	; 0x34
   d45da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d45dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d45dc:	b510      	push	{r4, lr}
   d45de:	4b05      	ldr	r3, [pc, #20]	; (d45f4 <_ZN9IPAddressC1Ev+0x18>)
   d45e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d45e2:	2211      	movs	r2, #17
   d45e4:	f840 3b04 	str.w	r3, [r0], #4
   d45e8:	2100      	movs	r1, #0
   d45ea:	f000 fbef 	bl	d4dcc <memset>
}
   d45ee:	4620      	mov	r0, r4
   d45f0:	bd10      	pop	{r4, pc}
   d45f2:	bf00      	nop
   d45f4:	000d4f80 	.word	0x000d4f80

000d45f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d45f8:	4603      	mov	r3, r0
   d45fa:	4a07      	ldr	r2, [pc, #28]	; (d4618 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d45fc:	b510      	push	{r4, lr}
   d45fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4602:	f101 0210 	add.w	r2, r1, #16
   d4606:	f851 4b04 	ldr.w	r4, [r1], #4
   d460a:	f843 4b04 	str.w	r4, [r3], #4
   d460e:	4291      	cmp	r1, r2
   d4610:	d1f9      	bne.n	d4606 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4612:	780a      	ldrb	r2, [r1, #0]
   d4614:	701a      	strb	r2, [r3, #0]
}
   d4616:	bd10      	pop	{r4, pc}
   d4618:	000d4f80 	.word	0x000d4f80

000d461c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d461c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d461e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4622:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4626:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d462a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d462e:	2304      	movs	r3, #4
   d4630:	6041      	str	r1, [r0, #4]
   d4632:	7503      	strb	r3, [r0, #20]
}
   d4634:	bd10      	pop	{r4, pc}

000d4636 <_ZN9IPAddressaSEPKh>:
{
   d4636:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4638:	78cb      	ldrb	r3, [r1, #3]
   d463a:	9300      	str	r3, [sp, #0]
   d463c:	788b      	ldrb	r3, [r1, #2]
   d463e:	784a      	ldrb	r2, [r1, #1]
   d4640:	7809      	ldrb	r1, [r1, #0]
   d4642:	f7ff ffeb 	bl	d461c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4646:	b002      	add	sp, #8
   d4648:	bd10      	pop	{r4, pc}
	...

000d464c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d464c:	4b01      	ldr	r3, [pc, #4]	; (d4654 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d464e:	4a02      	ldr	r2, [pc, #8]	; (d4658 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4650:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4652:	4770      	bx	lr
   d4654:	2003e5b4 	.word	0x2003e5b4
   d4658:	000d4f8c 	.word	0x000d4f8c

000d465c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d465c:	2300      	movs	r3, #0
   d465e:	6840      	ldr	r0, [r0, #4]
   d4660:	461a      	mov	r2, r3
   d4662:	f7ff be81 	b.w	d4368 <network_connect>

000d4666 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4666:	6840      	ldr	r0, [r0, #4]
   d4668:	2200      	movs	r2, #0
   d466a:	2102      	movs	r1, #2
   d466c:	f7ff be8c 	b.w	d4388 <network_disconnect>

000d4670 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4670:	2200      	movs	r2, #0
   d4672:	6840      	ldr	r0, [r0, #4]
   d4674:	4611      	mov	r1, r2
   d4676:	f7ff be7f 	b.w	d4378 <network_connecting>

000d467a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d467a:	2200      	movs	r2, #0
   d467c:	6840      	ldr	r0, [r0, #4]
   d467e:	4611      	mov	r1, r2
   d4680:	f7ff be8a 	b.w	d4398 <network_ready>

000d4684 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4684:	2300      	movs	r3, #0
   d4686:	6840      	ldr	r0, [r0, #4]
   d4688:	461a      	mov	r2, r3
   d468a:	4619      	mov	r1, r3
   d468c:	f7ff be8c 	b.w	d43a8 <network_on>

000d4690 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4690:	2300      	movs	r3, #0
   d4692:	6840      	ldr	r0, [r0, #4]
   d4694:	461a      	mov	r2, r3
   d4696:	4619      	mov	r1, r3
   d4698:	f7ff be8e 	b.w	d43b8 <network_off>

000d469c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d469c:	6840      	ldr	r0, [r0, #4]
   d469e:	2100      	movs	r1, #0
   d46a0:	f7ff beb2 	b.w	d4408 <network_is_on>

000d46a4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d46a4:	6840      	ldr	r0, [r0, #4]
   d46a6:	2100      	movs	r1, #0
   d46a8:	f7ff beb6 	b.w	d4418 <network_is_off>

000d46ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d46ac:	6840      	ldr	r0, [r0, #4]
   d46ae:	2200      	movs	r2, #0
   d46b0:	f081 0101 	eor.w	r1, r1, #1
   d46b4:	f7ff be88 	b.w	d43c8 <network_listen>

000d46b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d46b8:	6840      	ldr	r0, [r0, #4]
   d46ba:	2200      	movs	r2, #0
   d46bc:	f7ff be94 	b.w	d43e8 <network_set_listen_timeout>

000d46c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d46c0:	2200      	movs	r2, #0
   d46c2:	6840      	ldr	r0, [r0, #4]
   d46c4:	4611      	mov	r1, r2
   d46c6:	f7ff be97 	b.w	d43f8 <network_get_listen_timeout>

000d46ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d46ca:	2200      	movs	r2, #0
   d46cc:	6840      	ldr	r0, [r0, #4]
   d46ce:	4611      	mov	r1, r2
   d46d0:	f7ff be82 	b.w	d43d8 <network_listening>

000d46d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d46d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d46d8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d46da:	b095      	sub	sp, #84	; 0x54
   d46dc:	4616      	mov	r6, r2
   d46de:	460d      	mov	r5, r1
   d46e0:	4607      	mov	r7, r0
    IPAddress addr;
   d46e2:	f7ff ff7b 	bl	d45dc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d46e6:	4621      	mov	r1, r4
   d46e8:	2218      	movs	r2, #24
   d46ea:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d46ec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d46ee:	f000 fb6d 	bl	d4dcc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d46f2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d46f4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d46f8:	4621      	mov	r1, r4
   d46fa:	466b      	mov	r3, sp
   d46fc:	aa0c      	add	r2, sp, #48	; 0x30
   d46fe:	4630      	mov	r0, r6
   d4700:	f7ff fd76 	bl	d41f0 <netdb_getaddrinfo>
    if (!r) {
   d4704:	4604      	mov	r4, r0
   d4706:	2800      	cmp	r0, #0
   d4708:	d146      	bne.n	d4798 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d470a:	4602      	mov	r2, r0
   d470c:	2101      	movs	r1, #1
   d470e:	6868      	ldr	r0, [r5, #4]
   d4710:	f7ff fe42 	bl	d4398 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4714:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4716:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4718:	4622      	mov	r2, r4
   d471a:	6868      	ldr	r0, [r5, #4]
   d471c:	f7ff fe3c 	bl	d4398 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4720:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4722:	4681      	mov	r9, r0
        bool ok = false;
   d4724:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4726:	2e00      	cmp	r6, #0
   d4728:	d036      	beq.n	d4798 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d472a:	2900      	cmp	r1, #0
   d472c:	d134      	bne.n	d4798 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d472e:	6873      	ldr	r3, [r6, #4]
   d4730:	2b02      	cmp	r3, #2
   d4732:	d003      	beq.n	d473c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4734:	2b0a      	cmp	r3, #10
   d4736:	d00b      	beq.n	d4750 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4738:	69f6      	ldr	r6, [r6, #28]
   d473a:	e7f4      	b.n	d4726 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d473c:	f1b8 0f00 	cmp.w	r8, #0
   d4740:	d004      	beq.n	d474c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4742:	6971      	ldr	r1, [r6, #20]
   d4744:	4638      	mov	r0, r7
   d4746:	3104      	adds	r1, #4
   d4748:	f7ff ff75 	bl	d4636 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d474c:	4641      	mov	r1, r8
   d474e:	e7f3      	b.n	d4738 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4750:	f1b9 0f00 	cmp.w	r9, #0
   d4754:	d101      	bne.n	d475a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4756:	4649      	mov	r1, r9
   d4758:	e7ee      	b.n	d4738 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d475a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d475c:	2210      	movs	r2, #16
   d475e:	a801      	add	r0, sp, #4
   d4760:	f000 fb34 	bl	d4dcc <memset>
                    a.v = 6;
   d4764:	2306      	movs	r3, #6
   d4766:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d476a:	ad01      	add	r5, sp, #4
   d476c:	f104 0308 	add.w	r3, r4, #8
   d4770:	3418      	adds	r4, #24
   d4772:	6818      	ldr	r0, [r3, #0]
   d4774:	6859      	ldr	r1, [r3, #4]
   d4776:	462a      	mov	r2, r5
   d4778:	c203      	stmia	r2!, {r0, r1}
   d477a:	3308      	adds	r3, #8
   d477c:	42a3      	cmp	r3, r4
   d477e:	4615      	mov	r5, r2
   d4780:	d1f7      	bne.n	d4772 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4782:	a901      	add	r1, sp, #4
   d4784:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4786:	ad07      	add	r5, sp, #28
   d4788:	f7ff ff36 	bl	d45f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d478e:	1d3c      	adds	r4, r7, #4
   d4790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4792:	682b      	ldr	r3, [r5, #0]
   d4794:	7023      	strb	r3, [r4, #0]
   d4796:	e7de      	b.n	d4756 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4798:	9800      	ldr	r0, [sp, #0]
   d479a:	f7ff fd21 	bl	d41e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d479e:	4638      	mov	r0, r7
   d47a0:	b015      	add	sp, #84	; 0x54
   d47a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d47a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d47a8:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d47aa:	4a03      	ldr	r2, [pc, #12]	; (d47b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d47ac:	601a      	str	r2, [r3, #0]
   d47ae:	2200      	movs	r2, #0
   d47b0:	605a      	str	r2, [r3, #4]

} // spark
   d47b2:	4770      	bx	lr
   d47b4:	2003e5b8 	.word	0x2003e5b8
   d47b8:	000d4f98 	.word	0x000d4f98

000d47bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47be:	4606      	mov	r6, r0
   d47c0:	460d      	mov	r5, r1
  size_t n = 0;
   d47c2:	188f      	adds	r7, r1, r2
   d47c4:	2400      	movs	r4, #0
  while (size--) {
   d47c6:	42bd      	cmp	r5, r7
   d47c8:	d00c      	beq.n	d47e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47ca:	6833      	ldr	r3, [r6, #0]
   d47cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47d0:	689b      	ldr	r3, [r3, #8]
   d47d2:	4630      	mov	r0, r6
   d47d4:	4798      	blx	r3
     if (chunk>=0)
   d47d6:	1e03      	subs	r3, r0, #0
   d47d8:	db01      	blt.n	d47de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47da:	441c      	add	r4, r3
  while (size--) {
   d47dc:	e7f3      	b.n	d47c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47de:	2c00      	cmp	r4, #0
   d47e0:	bf08      	it	eq
   d47e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d47e4:	4620      	mov	r0, r4
   d47e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47e8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d47e8:	b513      	push	{r0, r1, r4, lr}
   d47ea:	4604      	mov	r4, r0
    }
   d47ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d47ee:	b159      	cbz	r1, d4808 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d47f0:	9101      	str	r1, [sp, #4]
   d47f2:	f000 fb17 	bl	d4e24 <strlen>
   d47f6:	6823      	ldr	r3, [r4, #0]
   d47f8:	9901      	ldr	r1, [sp, #4]
   d47fa:	68db      	ldr	r3, [r3, #12]
   d47fc:	4602      	mov	r2, r0
   d47fe:	4620      	mov	r0, r4
    }
   d4800:	b002      	add	sp, #8
   d4802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4806:	4718      	bx	r3
    }
   d4808:	b002      	add	sp, #8
   d480a:	bd10      	pop	{r4, pc}

000d480c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d480c:	6803      	ldr	r3, [r0, #0]
   d480e:	689b      	ldr	r3, [r3, #8]
   d4810:	4718      	bx	r3

000d4812 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4812:	b530      	push	{r4, r5, lr}
   d4814:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4816:	2300      	movs	r3, #0
   d4818:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d481c:	2a01      	cmp	r2, #1
   d481e:	bf98      	it	ls
   d4820:	220a      	movls	r2, #10
   d4822:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4824:	460d      	mov	r5, r1
   d4826:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d482a:	fb01 5312 	mls	r3, r1, r2, r5
   d482e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4832:	2b09      	cmp	r3, #9
   d4834:	bf94      	ite	ls
   d4836:	3330      	addls	r3, #48	; 0x30
   d4838:	3337      	addhi	r3, #55	; 0x37
   d483a:	b2db      	uxtb	r3, r3
  } while(n);
   d483c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d483e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4842:	d9ef      	bls.n	d4824 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4844:	4621      	mov	r1, r4
   d4846:	f7ff ffcf 	bl	d47e8 <_ZN5Print5writeEPKc>
}
   d484a:	b00b      	add	sp, #44	; 0x2c
   d484c:	bd30      	pop	{r4, r5, pc}
	...

000d4850 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d4850:	4b01      	ldr	r3, [pc, #4]	; (d4858 <_GLOBAL__sub_I_RGB+0x8>)
   d4852:	2200      	movs	r2, #0
   d4854:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4856:	4770      	bx	lr
   d4858:	2003e5c0 	.word	0x2003e5c0

000d485c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d485c:	b510      	push	{r4, lr}
   d485e:	4604      	mov	r4, r0
   d4860:	4608      	mov	r0, r1
{
    _spi = spi;
   d4862:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4864:	f7ff fccc 	bl	d4200 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4868:	2300      	movs	r3, #0
   d486a:	6063      	str	r3, [r4, #4]
}
   d486c:	4620      	mov	r0, r4
   d486e:	bd10      	pop	{r4, pc}

000d4870 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4870:	4b05      	ldr	r3, [pc, #20]	; (d4888 <_GLOBAL__sub_I_System+0x18>)
   d4872:	2202      	movs	r2, #2
   d4874:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4876:	4b05      	ldr	r3, [pc, #20]	; (d488c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4878:	4a05      	ldr	r2, [pc, #20]	; (d4890 <_GLOBAL__sub_I_System+0x20>)
   d487a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d487c:	2000      	movs	r0, #0
   d487e:	6018      	str	r0, [r3, #0]
   d4880:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4882:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4884:	f7ff bd3c 	b.w	d4300 <set_system_mode>
   d4888:	2003e5dc 	.word	0x2003e5dc
   d488c:	2003e5d0 	.word	0x2003e5d0
   d4890:	ffff0000 	.word	0xffff0000

000d4894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4894:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4896:	681a      	ldr	r2, [r3, #0]
   d4898:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d489a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d489c:	4770      	bx	lr
   d489e:	bf00      	nop
   d48a0:	2003e530 	.word	0x2003e530
   d48a4:	2003e5e0 	.word	0x2003e5e0

000d48a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d48a8:	4770      	bx	lr

000d48aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d48aa:	7441      	strb	r1, [r0, #17]
}
   d48ac:	4770      	bx	lr

000d48ae <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d48ae:	4770      	bx	lr

000d48b0 <_ZN11USARTSerial17availableForWriteEv>:
{
   d48b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d48b2:	7c00      	ldrb	r0, [r0, #16]
   d48b4:	f7ff fcec 	bl	d4290 <hal_usart_available_data_for_write>
}
   d48b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d48bc:	bd08      	pop	{r3, pc}

000d48be <_ZN11USARTSerial9availableEv>:
{
   d48be:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d48c0:	7c00      	ldrb	r0, [r0, #16]
   d48c2:	f7ff fcbd 	bl	d4240 <hal_usart_available>
}
   d48c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d48ca:	bd08      	pop	{r3, pc}

000d48cc <_ZN11USARTSerial4peekEv>:
{
   d48cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d48ce:	7c00      	ldrb	r0, [r0, #16]
   d48d0:	f7ff fcc6 	bl	d4260 <hal_usart_peek>
}
   d48d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d48d8:	bd08      	pop	{r3, pc}

000d48da <_ZN11USARTSerial4readEv>:
{
   d48da:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d48dc:	7c00      	ldrb	r0, [r0, #16]
   d48de:	f7ff fcb7 	bl	d4250 <hal_usart_read>
}
   d48e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d48e6:	bd08      	pop	{r3, pc}

000d48e8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d48e8:	7c00      	ldrb	r0, [r0, #16]
   d48ea:	f7ff bcc1 	b.w	d4270 <hal_usart_flush>

000d48ee <_ZN11USARTSerial5writeEh>:
{
   d48ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d48f0:	7c45      	ldrb	r5, [r0, #17]
{
   d48f2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d48f4:	b12d      	cbz	r5, d4902 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d48f6:	7c20      	ldrb	r0, [r4, #16]
}
   d48f8:	b003      	add	sp, #12
   d48fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d48fe:	f7ff bc97 	b.w	d4230 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4902:	7c00      	ldrb	r0, [r0, #16]
   d4904:	9101      	str	r1, [sp, #4]
   d4906:	f7ff fcc3 	bl	d4290 <hal_usart_available_data_for_write>
   d490a:	2800      	cmp	r0, #0
   d490c:	9901      	ldr	r1, [sp, #4]
   d490e:	dcf2      	bgt.n	d48f6 <_ZN11USARTSerial5writeEh+0x8>
}
   d4910:	4628      	mov	r0, r5
   d4912:	b003      	add	sp, #12
   d4914:	bd30      	pop	{r4, r5, pc}

000d4916 <_ZN11USARTSerialD0Ev>:
   d4916:	b510      	push	{r4, lr}
   d4918:	2114      	movs	r1, #20
   d491a:	4604      	mov	r4, r0
   d491c:	f000 fa3e 	bl	d4d9c <_ZdlPvj>
   d4920:	4620      	mov	r0, r4
   d4922:	bd10      	pop	{r4, pc}

000d4924 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4924:	b510      	push	{r4, lr}
   d4926:	f04f 0c00 	mov.w	ip, #0
   d492a:	4604      	mov	r4, r0
   d492c:	4608      	mov	r0, r1
   d492e:	4611      	mov	r1, r2
   d4930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4934:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4938:	4a04      	ldr	r2, [pc, #16]	; (d494c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d493a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d493c:	2201      	movs	r2, #1
  _serial = serial;
   d493e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4940:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4942:	461a      	mov	r2, r3
   d4944:	f7ff fc6c 	bl	d4220 <hal_usart_init>
}
   d4948:	4620      	mov	r0, r4
   d494a:	bd10      	pop	{r4, pc}
   d494c:	000d4ff0 	.word	0x000d4ff0

000d4950 <_Z22__fetch_global_Serial1v>:
{
   d4950:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4952:	4c0d      	ldr	r4, [pc, #52]	; (d4988 <_Z22__fetch_global_Serial1v+0x38>)
   d4954:	7821      	ldrb	r1, [r4, #0]
   d4956:	f3bf 8f5b 	dmb	ish
   d495a:	f011 0101 	ands.w	r1, r1, #1
   d495e:	d110      	bne.n	d4982 <_Z22__fetch_global_Serial1v+0x32>
   d4960:	4620      	mov	r0, r4
   d4962:	9101      	str	r1, [sp, #4]
   d4964:	f7ff fb99 	bl	d409a <__cxa_guard_acquire>
   d4968:	9901      	ldr	r1, [sp, #4]
   d496a:	b150      	cbz	r0, d4982 <_Z22__fetch_global_Serial1v+0x32>
   d496c:	4b07      	ldr	r3, [pc, #28]	; (d498c <_Z22__fetch_global_Serial1v+0x3c>)
   d496e:	4a08      	ldr	r2, [pc, #32]	; (d4990 <_Z22__fetch_global_Serial1v+0x40>)
   d4970:	4808      	ldr	r0, [pc, #32]	; (d4994 <_Z22__fetch_global_Serial1v+0x44>)
   d4972:	f7ff ffd7 	bl	d4924 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fb94 	bl	d40a4 <__cxa_guard_release>
   d497c:	4806      	ldr	r0, [pc, #24]	; (d4998 <_Z22__fetch_global_Serial1v+0x48>)
   d497e:	f000 fa11 	bl	d4da4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4982:	4804      	ldr	r0, [pc, #16]	; (d4994 <_Z22__fetch_global_Serial1v+0x44>)
   d4984:	b002      	add	sp, #8
   d4986:	bd10      	pop	{r4, pc}
   d4988:	2003e5e4 	.word	0x2003e5e4
   d498c:	2003e66c 	.word	0x2003e66c
   d4990:	2003e5e8 	.word	0x2003e5e8
   d4994:	2003e6f0 	.word	0x2003e6f0
   d4998:	000d48af 	.word	0x000d48af

000d499c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d499c:	7441      	strb	r1, [r0, #17]
}
   d499e:	4770      	bx	lr

000d49a0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d49a0:	4770      	bx	lr

000d49a2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d49a2:	4770      	bx	lr

000d49a4 <_ZN9USBSerial4readEv>:
{
   d49a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d49a6:	2100      	movs	r1, #0
   d49a8:	7c00      	ldrb	r0, [r0, #16]
   d49aa:	f7ff fc91 	bl	d42d0 <HAL_USB_USART_Receive_Data>
}
   d49ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d49b2:	bd08      	pop	{r3, pc}

000d49b4 <_ZN9USBSerial4peekEv>:
{
   d49b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d49b6:	2101      	movs	r1, #1
   d49b8:	7c00      	ldrb	r0, [r0, #16]
   d49ba:	f7ff fc89 	bl	d42d0 <HAL_USB_USART_Receive_Data>
}
   d49be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d49c2:	bd08      	pop	{r3, pc}

000d49c4 <_ZN9USBSerial17availableForWriteEv>:
{
   d49c4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d49c6:	7c00      	ldrb	r0, [r0, #16]
   d49c8:	f7ff fc7a 	bl	d42c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d49cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49d0:	bd08      	pop	{r3, pc}

000d49d2 <_ZN9USBSerial9availableEv>:
{
   d49d2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d49d4:	7c00      	ldrb	r0, [r0, #16]
   d49d6:	f7ff fc6b 	bl	d42b0 <HAL_USB_USART_Available_Data>
}
   d49da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49de:	bd08      	pop	{r3, pc}

000d49e0 <_ZN9USBSerial5writeEh>:
{
   d49e0:	b513      	push	{r0, r1, r4, lr}
   d49e2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49e4:	7c00      	ldrb	r0, [r0, #16]
{
   d49e6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49e8:	f7ff fc6a 	bl	d42c0 <HAL_USB_USART_Available_Data_For_Write>
   d49ec:	2800      	cmp	r0, #0
   d49ee:	9901      	ldr	r1, [sp, #4]
   d49f0:	dc01      	bgt.n	d49f6 <_ZN9USBSerial5writeEh+0x16>
   d49f2:	7c60      	ldrb	r0, [r4, #17]
   d49f4:	b120      	cbz	r0, d4a00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d49f6:	7c20      	ldrb	r0, [r4, #16]
   d49f8:	f7ff fc72 	bl	d42e0 <HAL_USB_USART_Send_Data>
   d49fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4a00:	b002      	add	sp, #8
   d4a02:	bd10      	pop	{r4, pc}

000d4a04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4a04:	7c00      	ldrb	r0, [r0, #16]
   d4a06:	f7ff bc73 	b.w	d42f0 <HAL_USB_USART_Flush_Data>

000d4a0a <_ZN9USBSerialD0Ev>:
   d4a0a:	b510      	push	{r4, lr}
   d4a0c:	2114      	movs	r1, #20
   d4a0e:	4604      	mov	r4, r0
   d4a10:	f000 f9c4 	bl	d4d9c <_ZdlPvj>
   d4a14:	4620      	mov	r0, r4
   d4a16:	bd10      	pop	{r4, pc}

000d4a18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a18:	b510      	push	{r4, lr}
   d4a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a1e:	4604      	mov	r4, r0
   d4a20:	4608      	mov	r0, r1
   d4a22:	2100      	movs	r1, #0
   d4a24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4a28:	4b04      	ldr	r3, [pc, #16]	; (d4a3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4a2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4a2c:	2301      	movs	r3, #1
  _serial = serial;
   d4a2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4a30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4a32:	4611      	mov	r1, r2
   d4a34:	f7ff fc34 	bl	d42a0 <HAL_USB_USART_Init>
}
   d4a38:	4620      	mov	r0, r4
   d4a3a:	bd10      	pop	{r4, pc}
   d4a3c:	000d5020 	.word	0x000d5020

000d4a40 <_Z19acquireSerialBufferv>:
{
   d4a40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4a42:	2214      	movs	r2, #20
{
   d4a44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4a46:	2100      	movs	r1, #0
   d4a48:	f000 f9c0 	bl	d4dcc <memset>
}
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	bd10      	pop	{r4, pc}

000d4a50 <_Z16_fetch_usbserialv>:
{
   d4a50:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a52:	4c0f      	ldr	r4, [pc, #60]	; (d4a90 <_Z16_fetch_usbserialv+0x40>)
{
   d4a54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a56:	a803      	add	r0, sp, #12
   d4a58:	f7ff fff2 	bl	d4a40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a5c:	7821      	ldrb	r1, [r4, #0]
   d4a5e:	f3bf 8f5b 	dmb	ish
   d4a62:	f011 0101 	ands.w	r1, r1, #1
   d4a66:	d10f      	bne.n	d4a88 <_Z16_fetch_usbserialv+0x38>
   d4a68:	4620      	mov	r0, r4
   d4a6a:	9101      	str	r1, [sp, #4]
   d4a6c:	f7ff fb15 	bl	d409a <__cxa_guard_acquire>
   d4a70:	9901      	ldr	r1, [sp, #4]
   d4a72:	b148      	cbz	r0, d4a88 <_Z16_fetch_usbserialv+0x38>
   d4a74:	aa03      	add	r2, sp, #12
   d4a76:	4807      	ldr	r0, [pc, #28]	; (d4a94 <_Z16_fetch_usbserialv+0x44>)
   d4a78:	f7ff ffce 	bl	d4a18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	f7ff fb11 	bl	d40a4 <__cxa_guard_release>
   d4a82:	4805      	ldr	r0, [pc, #20]	; (d4a98 <_Z16_fetch_usbserialv+0x48>)
   d4a84:	f000 f98e 	bl	d4da4 <atexit>
	return _usbserial;
}
   d4a88:	4802      	ldr	r0, [pc, #8]	; (d4a94 <_Z16_fetch_usbserialv+0x44>)
   d4a8a:	b008      	add	sp, #32
   d4a8c:	bd10      	pop	{r4, pc}
   d4a8e:	bf00      	nop
   d4a90:	2003e704 	.word	0x2003e704
   d4a94:	2003e708 	.word	0x2003e708
   d4a98:	000d49a1 	.word	0x000d49a1

000d4a9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4a9c:	2200      	movs	r2, #0
   d4a9e:	6840      	ldr	r0, [r0, #4]
   d4aa0:	4611      	mov	r1, r2
   d4aa2:	f7ff bc79 	b.w	d4398 <network_ready>

000d4aa6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4aa6:	2200      	movs	r2, #0
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	4611      	mov	r1, r2
   d4aac:	f7ff bc94 	b.w	d43d8 <network_listening>

000d4ab0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4ab0:	2200      	movs	r2, #0
   d4ab2:	6840      	ldr	r0, [r0, #4]
   d4ab4:	4611      	mov	r1, r2
   d4ab6:	f7ff bc9f 	b.w	d43f8 <network_get_listen_timeout>

000d4aba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4aba:	6840      	ldr	r0, [r0, #4]
   d4abc:	2200      	movs	r2, #0
   d4abe:	f7ff bc93 	b.w	d43e8 <network_set_listen_timeout>

000d4ac2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ac2:	6840      	ldr	r0, [r0, #4]
   d4ac4:	2200      	movs	r2, #0
   d4ac6:	f081 0101 	eor.w	r1, r1, #1
   d4aca:	f7ff bc7d 	b.w	d43c8 <network_listen>

000d4ace <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4ace:	2300      	movs	r3, #0
   d4ad0:	6840      	ldr	r0, [r0, #4]
   d4ad2:	461a      	mov	r2, r3
   d4ad4:	4619      	mov	r1, r3
   d4ad6:	f7ff bc6f 	b.w	d43b8 <network_off>

000d4ada <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ada:	2300      	movs	r3, #0
   d4adc:	6840      	ldr	r0, [r0, #4]
   d4ade:	461a      	mov	r2, r3
   d4ae0:	4619      	mov	r1, r3
   d4ae2:	f7ff bc61 	b.w	d43a8 <network_on>

000d4ae6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	6840      	ldr	r0, [r0, #4]
   d4aea:	4611      	mov	r1, r2
   d4aec:	f7ff bc44 	b.w	d4378 <network_connecting>

000d4af0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4af0:	6840      	ldr	r0, [r0, #4]
   d4af2:	2200      	movs	r2, #0
   d4af4:	2102      	movs	r1, #2
   d4af6:	f7ff bc47 	b.w	d4388 <network_disconnect>

000d4afa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4afa:	2300      	movs	r3, #0
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	461a      	mov	r2, r3
   d4b00:	f7ff bc32 	b.w	d4368 <network_connect>

000d4b04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4b04:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4b06:	2204      	movs	r2, #4
   d4b08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4b0a:	4a02      	ldr	r2, [pc, #8]	; (d4b14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4b0c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4b0e:	4770      	bx	lr
   d4b10:	2003e71c 	.word	0x2003e71c
   d4b14:	000d5050 	.word	0x000d5050

000d4b18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4b18:	4b01      	ldr	r3, [pc, #4]	; (d4b20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4b1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4b1c:	4770      	bx	lr
   d4b1e:	bf00      	nop
   d4b20:	2003e534 	.word	0x2003e534

000d4b24 <serialEventRun>:
{
   d4b24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b26:	4b0b      	ldr	r3, [pc, #44]	; (d4b54 <serialEventRun+0x30>)
   d4b28:	b143      	cbz	r3, d4b3c <serialEventRun+0x18>
   d4b2a:	f7ff ff91 	bl	d4a50 <_Z16_fetch_usbserialv>
   d4b2e:	6803      	ldr	r3, [r0, #0]
   d4b30:	691b      	ldr	r3, [r3, #16]
   d4b32:	4798      	blx	r3
   d4b34:	2800      	cmp	r0, #0
   d4b36:	dd01      	ble.n	d4b3c <serialEventRun+0x18>
        serialEvent();
   d4b38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4b3c:	4b06      	ldr	r3, [pc, #24]	; (d4b58 <serialEventRun+0x34>)
   d4b3e:	b143      	cbz	r3, d4b52 <serialEventRun+0x2e>
   d4b40:	f7ff ff06 	bl	d4950 <_Z22__fetch_global_Serial1v>
   d4b44:	6803      	ldr	r3, [r0, #0]
   d4b46:	691b      	ldr	r3, [r3, #16]
   d4b48:	4798      	blx	r3
   d4b4a:	2800      	cmp	r0, #0
   d4b4c:	dd01      	ble.n	d4b52 <serialEventRun+0x2e>
        serialEvent1();
   d4b4e:	f3af 8000 	nop.w
}
   d4b52:	bd08      	pop	{r3, pc}
	...

000d4b5c <_post_loop>:
{
   d4b5c:	b508      	push	{r3, lr}
	serialEventRun();
   d4b5e:	f7ff ffe1 	bl	d4b24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b62:	f7ff fadd 	bl	d4120 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b66:	4b01      	ldr	r3, [pc, #4]	; (d4b6c <_post_loop+0x10>)
   d4b68:	6018      	str	r0, [r3, #0]
}
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	2003e738 	.word	0x2003e738

000d4b70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4b70:	4805      	ldr	r0, [pc, #20]	; (d4b88 <_Z33system_initialize_user_backup_ramv+0x18>)
   d4b72:	4a06      	ldr	r2, [pc, #24]	; (d4b8c <_Z33system_initialize_user_backup_ramv+0x1c>)
   d4b74:	4906      	ldr	r1, [pc, #24]	; (d4b90 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d4b76:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4b78:	1a12      	subs	r2, r2, r0
   d4b7a:	f000 f919 	bl	d4db0 <memcpy>
    __backup_sram_signature = signature;
   d4b7e:	4b05      	ldr	r3, [pc, #20]	; (d4b94 <_Z33system_initialize_user_backup_ramv+0x24>)
   d4b80:	4a05      	ldr	r2, [pc, #20]	; (d4b98 <_Z33system_initialize_user_backup_ramv+0x28>)
   d4b82:	601a      	str	r2, [r3, #0]
}
   d4b84:	bd08      	pop	{r3, pc}
   d4b86:	bf00      	nop
   d4b88:	2003f400 	.word	0x2003f400
   d4b8c:	2003f404 	.word	0x2003f404
   d4b90:	000d50b0 	.word	0x000d50b0
   d4b94:	2003f400 	.word	0x2003f400
   d4b98:	9a271c1e 	.word	0x9a271c1e

000d4b9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	9300      	str	r3, [sp, #0]
   d4ba2:	461a      	mov	r2, r3
   d4ba4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ba8:	f7ff fbcc 	bl	d4344 <system_ctrl_set_result>
}
   d4bac:	b003      	add	sp, #12
   d4bae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4bb4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4bb4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4bb6:	8843      	ldrh	r3, [r0, #2]
   d4bb8:	2b0a      	cmp	r3, #10
   d4bba:	d008      	beq.n	d4bce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4bbc:	2b50      	cmp	r3, #80	; 0x50
   d4bbe:	d10b      	bne.n	d4bd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4bc0:	4b09      	ldr	r3, [pc, #36]	; (d4be8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4bc2:	681b      	ldr	r3, [r3, #0]
   d4bc4:	b14b      	cbz	r3, d4bda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4bc6:	b003      	add	sp, #12
   d4bc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4bcc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4bce:	f7ff ffe5 	bl	d4b9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4bd2:	b003      	add	sp, #12
   d4bd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bd8:	2300      	movs	r3, #0
   d4bda:	9300      	str	r3, [sp, #0]
   d4bdc:	461a      	mov	r2, r3
   d4bde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4be2:	f7ff fbaf 	bl	d4344 <system_ctrl_set_result>
}
   d4be6:	e7f4      	b.n	d4bd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4be8:	2003e728 	.word	0x2003e728

000d4bec <module_user_init_hook>:
{
   d4bec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4bee:	4812      	ldr	r0, [pc, #72]	; (d4c38 <module_user_init_hook+0x4c>)
   d4bf0:	2100      	movs	r1, #0
   d4bf2:	f7ff fc29 	bl	d4448 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d4bf6:	4b11      	ldr	r3, [pc, #68]	; (d4c3c <module_user_init_hook+0x50>)
   d4bf8:	681a      	ldr	r2, [r3, #0]
   d4bfa:	4b11      	ldr	r3, [pc, #68]	; (d4c40 <module_user_init_hook+0x54>)
   d4bfc:	429a      	cmp	r2, r3
   d4bfe:	4b11      	ldr	r3, [pc, #68]	; (d4c44 <module_user_init_hook+0x58>)
   d4c00:	bf0c      	ite	eq
   d4c02:	2201      	moveq	r2, #1
   d4c04:	2200      	movne	r2, #0
   d4c06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4c08:	d001      	beq.n	d4c0e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d4c0a:	f7ff ffb1 	bl	d4b70 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c0e:	f7ff fa7f 	bl	d4110 <HAL_RNG_GetRandomNumber>
   d4c12:	4604      	mov	r4, r0
    srand(seed);
   d4c14:	f000 f8e2 	bl	d4ddc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c18:	4b0b      	ldr	r3, [pc, #44]	; (d4c48 <module_user_init_hook+0x5c>)
   d4c1a:	b113      	cbz	r3, d4c22 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c22:	2100      	movs	r1, #0
   d4c24:	4808      	ldr	r0, [pc, #32]	; (d4c48 <module_user_init_hook+0x5c>)
   d4c26:	f7ff fb97 	bl	d4358 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c2e:	4807      	ldr	r0, [pc, #28]	; (d4c4c <module_user_init_hook+0x60>)
   d4c30:	2100      	movs	r1, #0
   d4c32:	f7ff bb7d 	b.w	d4330 <system_ctrl_set_app_request_handler>
   d4c36:	bf00      	nop
   d4c38:	000d4b19 	.word	0x000d4b19
   d4c3c:	2003f400 	.word	0x2003f400
   d4c40:	9a271c1e 	.word	0x9a271c1e
   d4c44:	2003e724 	.word	0x2003e724
   d4c48:	00000000 	.word	0x00000000
   d4c4c:	000d4bb5 	.word	0x000d4bb5

000d4c50 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4c50:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d4c52:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d4c54:	d902      	bls.n	d4c5c <pinAvailable+0xc>
    return false;
   d4c56:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4c58:	b002      	add	sp, #8
   d4c5a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4c5c:	f1a0 030b 	sub.w	r3, r0, #11
   d4c60:	2b02      	cmp	r3, #2
   d4c62:	d81a      	bhi.n	d4c9a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4c64:	4c17      	ldr	r4, [pc, #92]	; (d4cc4 <pinAvailable+0x74>)
   d4c66:	7821      	ldrb	r1, [r4, #0]
   d4c68:	f3bf 8f5b 	dmb	ish
   d4c6c:	f011 0101 	ands.w	r1, r1, #1
   d4c70:	d10b      	bne.n	d4c8a <pinAvailable+0x3a>
   d4c72:	4620      	mov	r0, r4
   d4c74:	9101      	str	r1, [sp, #4]
   d4c76:	f7ff fa10 	bl	d409a <__cxa_guard_acquire>
   d4c7a:	9901      	ldr	r1, [sp, #4]
   d4c7c:	b128      	cbz	r0, d4c8a <pinAvailable+0x3a>
   d4c7e:	4812      	ldr	r0, [pc, #72]	; (d4cc8 <pinAvailable+0x78>)
   d4c80:	f7ff fdec 	bl	d485c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4c84:	4620      	mov	r0, r4
   d4c86:	f7ff fa0d 	bl	d40a4 <__cxa_guard_release>
   d4c8a:	4b0f      	ldr	r3, [pc, #60]	; (d4cc8 <pinAvailable+0x78>)
   d4c8c:	7818      	ldrb	r0, [r3, #0]
   d4c8e:	f7ff fabf 	bl	d4210 <hal_spi_is_enabled>
   d4c92:	2800      	cmp	r0, #0
   d4c94:	d1df      	bne.n	d4c56 <pinAvailable+0x6>
  return true; // 'pin' is available
   d4c96:	2001      	movs	r0, #1
   d4c98:	e7de      	b.n	d4c58 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4c9a:	2801      	cmp	r0, #1
   d4c9c:	d809      	bhi.n	d4cb2 <pinAvailable+0x62>
   d4c9e:	f000 f859 	bl	d4d54 <_Z19__fetch_global_Wirev>
   d4ca2:	2100      	movs	r1, #0
   d4ca4:	7c00      	ldrb	r0, [r0, #16]
   d4ca6:	f7ff fa83 	bl	d41b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4caa:	f080 0001 	eor.w	r0, r0, #1
   d4cae:	b2c0      	uxtb	r0, r0
   d4cb0:	e7d2      	b.n	d4c58 <pinAvailable+0x8>
   d4cb2:	3809      	subs	r0, #9
   d4cb4:	2801      	cmp	r0, #1
   d4cb6:	d8ee      	bhi.n	d4c96 <pinAvailable+0x46>
   d4cb8:	f7ff fe4a 	bl	d4950 <_Z22__fetch_global_Serial1v>
   d4cbc:	7c00      	ldrb	r0, [r0, #16]
   d4cbe:	f7ff fadf 	bl	d4280 <hal_usart_is_enabled>
   d4cc2:	e7f2      	b.n	d4caa <pinAvailable+0x5a>
   d4cc4:	2003e72c 	.word	0x2003e72c
   d4cc8:	2003e730 	.word	0x2003e730

000d4ccc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4ccc:	2823      	cmp	r0, #35	; 0x23
{
   d4cce:	b538      	push	{r3, r4, r5, lr}
   d4cd0:	4604      	mov	r4, r0
   d4cd2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4cd4:	d80a      	bhi.n	d4cec <pinMode+0x20>
   d4cd6:	29ff      	cmp	r1, #255	; 0xff
   d4cd8:	d008      	beq.n	d4cec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4cda:	f7ff ffb9 	bl	d4c50 <pinAvailable>
   d4cde:	b128      	cbz	r0, d4cec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4ce0:	4629      	mov	r1, r5
   d4ce2:	4620      	mov	r0, r4
}
   d4ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4ce8:	f7ff ba22 	b.w	d4130 <HAL_Pin_Mode>
}
   d4cec:	bd38      	pop	{r3, r4, r5, pc}

000d4cee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d4cee:	b538      	push	{r3, r4, r5, lr}
   d4cf0:	4604      	mov	r4, r0
   d4cf2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4cf4:	f7ff fa24 	bl	d4140 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d4cf8:	28ff      	cmp	r0, #255	; 0xff
   d4cfa:	d010      	beq.n	d4d1e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d4cfc:	2806      	cmp	r0, #6
   d4cfe:	d804      	bhi.n	d4d0a <digitalWrite+0x1c>
   d4d00:	234d      	movs	r3, #77	; 0x4d
   d4d02:	fa23 f000 	lsr.w	r0, r3, r0
   d4d06:	07c3      	lsls	r3, r0, #31
   d4d08:	d409      	bmi.n	d4d1e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff ffa0 	bl	d4c50 <pinAvailable>
   d4d10:	b128      	cbz	r0, d4d1e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4d12:	4629      	mov	r1, r5
   d4d14:	4620      	mov	r0, r4
}
   d4d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d4d1a:	f7ff ba19 	b.w	d4150 <HAL_GPIO_Write>
}
   d4d1e:	bd38      	pop	{r3, r4, r5, pc}

000d4d20 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4d20:	4770      	bx	lr
	...

000d4d24 <_Z17acquireWireBufferv>:
{
   d4d24:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4d26:	2300      	movs	r3, #0
   d4d28:	2520      	movs	r5, #32
   d4d2a:	8043      	strh	r3, [r0, #2]
   d4d2c:	2314      	movs	r3, #20
{
   d4d2e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4d30:	8003      	strh	r3, [r0, #0]
   d4d32:	6085      	str	r5, [r0, #8]
   d4d34:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4d36:	4906      	ldr	r1, [pc, #24]	; (d4d50 <_Z17acquireWireBufferv+0x2c>)
   d4d38:	4628      	mov	r0, r5
   d4d3a:	f000 f831 	bl	d4da0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4d3e:	4904      	ldr	r1, [pc, #16]	; (d4d50 <_Z17acquireWireBufferv+0x2c>)
	};
   d4d40:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4d42:	4628      	mov	r0, r5
   d4d44:	f000 f82c 	bl	d4da0 <_ZnajRKSt9nothrow_t>
	};
   d4d48:	60e0      	str	r0, [r4, #12]
}
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	bd38      	pop	{r3, r4, r5, pc}
   d4d4e:	bf00      	nop
   d4d50:	000d5084 	.word	0x000d5084

000d4d54 <_Z19__fetch_global_Wirev>:
{
   d4d54:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4d56:	4d0e      	ldr	r5, [pc, #56]	; (d4d90 <_Z19__fetch_global_Wirev+0x3c>)
   d4d58:	7829      	ldrb	r1, [r5, #0]
   d4d5a:	f3bf 8f5b 	dmb	ish
   d4d5e:	f011 0401 	ands.w	r4, r1, #1
{
   d4d62:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4d64:	d111      	bne.n	d4d8a <_Z19__fetch_global_Wirev+0x36>
   d4d66:	4628      	mov	r0, r5
   d4d68:	f7ff f997 	bl	d409a <__cxa_guard_acquire>
   d4d6c:	b168      	cbz	r0, d4d8a <_Z19__fetch_global_Wirev+0x36>
   d4d6e:	a801      	add	r0, sp, #4
   d4d70:	f7ff ffd8 	bl	d4d24 <_Z17acquireWireBufferv>
   d4d74:	aa01      	add	r2, sp, #4
   d4d76:	4621      	mov	r1, r4
   d4d78:	4806      	ldr	r0, [pc, #24]	; (d4d94 <_Z19__fetch_global_Wirev+0x40>)
   d4d7a:	f7ff fbe3 	bl	d4544 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4d7e:	4628      	mov	r0, r5
   d4d80:	f7ff f990 	bl	d40a4 <__cxa_guard_release>
   d4d84:	4804      	ldr	r0, [pc, #16]	; (d4d98 <_Z19__fetch_global_Wirev+0x44>)
   d4d86:	f000 f80d 	bl	d4da4 <atexit>
	return wire;
}
   d4d8a:	4802      	ldr	r0, [pc, #8]	; (d4d94 <_Z19__fetch_global_Wirev+0x40>)
   d4d8c:	b007      	add	sp, #28
   d4d8e:	bd30      	pop	{r4, r5, pc}
   d4d90:	2003e73c 	.word	0x2003e73c
   d4d94:	2003e740 	.word	0x2003e740
   d4d98:	000d4d21 	.word	0x000d4d21

000d4d9c <_ZdlPvj>:
   d4d9c:	f7ff b97b 	b.w	d4096 <_ZdlPv>

000d4da0 <_ZnajRKSt9nothrow_t>:
   d4da0:	f7ff b977 	b.w	d4092 <_Znaj>

000d4da4 <atexit>:
   d4da4:	2300      	movs	r3, #0
   d4da6:	4601      	mov	r1, r0
   d4da8:	461a      	mov	r2, r3
   d4daa:	4618      	mov	r0, r3
   d4dac:	f000 b842 	b.w	d4e34 <__register_exitproc>

000d4db0 <memcpy>:
   d4db0:	440a      	add	r2, r1
   d4db2:	4291      	cmp	r1, r2
   d4db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d4db8:	d100      	bne.n	d4dbc <memcpy+0xc>
   d4dba:	4770      	bx	lr
   d4dbc:	b510      	push	{r4, lr}
   d4dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4dc6:	4291      	cmp	r1, r2
   d4dc8:	d1f9      	bne.n	d4dbe <memcpy+0xe>
   d4dca:	bd10      	pop	{r4, pc}

000d4dcc <memset>:
   d4dcc:	4402      	add	r2, r0
   d4dce:	4603      	mov	r3, r0
   d4dd0:	4293      	cmp	r3, r2
   d4dd2:	d100      	bne.n	d4dd6 <memset+0xa>
   d4dd4:	4770      	bx	lr
   d4dd6:	f803 1b01 	strb.w	r1, [r3], #1
   d4dda:	e7f9      	b.n	d4dd0 <memset+0x4>

000d4ddc <srand>:
   d4ddc:	b538      	push	{r3, r4, r5, lr}
   d4dde:	4b0d      	ldr	r3, [pc, #52]	; (d4e14 <srand+0x38>)
   d4de0:	681d      	ldr	r5, [r3, #0]
   d4de2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d4de4:	4604      	mov	r4, r0
   d4de6:	b97b      	cbnz	r3, d4e08 <srand+0x2c>
   d4de8:	2018      	movs	r0, #24
   d4dea:	f7ff fb1d 	bl	d4428 <malloc>
   d4dee:	4a0a      	ldr	r2, [pc, #40]	; (d4e18 <srand+0x3c>)
   d4df0:	4b0a      	ldr	r3, [pc, #40]	; (d4e1c <srand+0x40>)
   d4df2:	63a8      	str	r0, [r5, #56]	; 0x38
   d4df4:	e9c0 2300 	strd	r2, r3, [r0]
   d4df8:	4b09      	ldr	r3, [pc, #36]	; (d4e20 <srand+0x44>)
   d4dfa:	6083      	str	r3, [r0, #8]
   d4dfc:	230b      	movs	r3, #11
   d4dfe:	8183      	strh	r3, [r0, #12]
   d4e00:	2201      	movs	r2, #1
   d4e02:	2300      	movs	r3, #0
   d4e04:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d4e08:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d4e0a:	2200      	movs	r2, #0
   d4e0c:	611c      	str	r4, [r3, #16]
   d4e0e:	615a      	str	r2, [r3, #20]
   d4e10:	bd38      	pop	{r3, r4, r5, pc}
   d4e12:	bf00      	nop
   d4e14:	2003e534 	.word	0x2003e534
   d4e18:	abcd330e 	.word	0xabcd330e
   d4e1c:	e66d1234 	.word	0xe66d1234
   d4e20:	0005deec 	.word	0x0005deec

000d4e24 <strlen>:
   d4e24:	4603      	mov	r3, r0
   d4e26:	f813 2b01 	ldrb.w	r2, [r3], #1
   d4e2a:	2a00      	cmp	r2, #0
   d4e2c:	d1fb      	bne.n	d4e26 <strlen+0x2>
   d4e2e:	1a18      	subs	r0, r3, r0
   d4e30:	3801      	subs	r0, #1
   d4e32:	4770      	bx	lr

000d4e34 <__register_exitproc>:
   d4e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e38:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d4ef4 <__register_exitproc+0xc0>
   d4e3c:	4606      	mov	r6, r0
   d4e3e:	f8d8 0000 	ldr.w	r0, [r8]
   d4e42:	461f      	mov	r7, r3
   d4e44:	460d      	mov	r5, r1
   d4e46:	4691      	mov	r9, r2
   d4e48:	f000 f856 	bl	d4ef8 <__retarget_lock_acquire_recursive>
   d4e4c:	4b25      	ldr	r3, [pc, #148]	; (d4ee4 <__register_exitproc+0xb0>)
   d4e4e:	681c      	ldr	r4, [r3, #0]
   d4e50:	b934      	cbnz	r4, d4e60 <__register_exitproc+0x2c>
   d4e52:	4c25      	ldr	r4, [pc, #148]	; (d4ee8 <__register_exitproc+0xb4>)
   d4e54:	601c      	str	r4, [r3, #0]
   d4e56:	4b25      	ldr	r3, [pc, #148]	; (d4eec <__register_exitproc+0xb8>)
   d4e58:	b113      	cbz	r3, d4e60 <__register_exitproc+0x2c>
   d4e5a:	681b      	ldr	r3, [r3, #0]
   d4e5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d4e60:	6863      	ldr	r3, [r4, #4]
   d4e62:	2b1f      	cmp	r3, #31
   d4e64:	dd07      	ble.n	d4e76 <__register_exitproc+0x42>
   d4e66:	f8d8 0000 	ldr.w	r0, [r8]
   d4e6a:	f000 f847 	bl	d4efc <__retarget_lock_release_recursive>
   d4e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4e76:	b34e      	cbz	r6, d4ecc <__register_exitproc+0x98>
   d4e78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d4e7c:	b988      	cbnz	r0, d4ea2 <__register_exitproc+0x6e>
   d4e7e:	4b1c      	ldr	r3, [pc, #112]	; (d4ef0 <__register_exitproc+0xbc>)
   d4e80:	b923      	cbnz	r3, d4e8c <__register_exitproc+0x58>
   d4e82:	f8d8 0000 	ldr.w	r0, [r8]
   d4e86:	f000 f838 	bl	d4efa <__retarget_lock_release>
   d4e8a:	e7f0      	b.n	d4e6e <__register_exitproc+0x3a>
   d4e8c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d4e90:	f7ff faca 	bl	d4428 <malloc>
   d4e94:	2800      	cmp	r0, #0
   d4e96:	d0f4      	beq.n	d4e82 <__register_exitproc+0x4e>
   d4e98:	2300      	movs	r3, #0
   d4e9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d4e9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d4ea2:	6863      	ldr	r3, [r4, #4]
   d4ea4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d4ea8:	2201      	movs	r2, #1
   d4eaa:	409a      	lsls	r2, r3
   d4eac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d4eb0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d4eb4:	4313      	orrs	r3, r2
   d4eb6:	2e02      	cmp	r6, #2
   d4eb8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d4ebc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d4ec0:	bf02      	ittt	eq
   d4ec2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d4ec6:	431a      	orreq	r2, r3
   d4ec8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d4ecc:	6863      	ldr	r3, [r4, #4]
   d4ece:	f8d8 0000 	ldr.w	r0, [r8]
   d4ed2:	1c5a      	adds	r2, r3, #1
   d4ed4:	3302      	adds	r3, #2
   d4ed6:	6062      	str	r2, [r4, #4]
   d4ed8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d4edc:	f000 f80e 	bl	d4efc <__retarget_lock_release_recursive>
   d4ee0:	2000      	movs	r0, #0
   d4ee2:	e7c6      	b.n	d4e72 <__register_exitproc+0x3e>
   d4ee4:	2003e7e0 	.word	0x2003e7e0
   d4ee8:	2003e754 	.word	0x2003e754
   d4eec:	00000000 	.word	0x00000000
   d4ef0:	000d4429 	.word	0x000d4429
   d4ef4:	2003e598 	.word	0x2003e598

000d4ef8 <__retarget_lock_acquire_recursive>:
   d4ef8:	4770      	bx	lr

000d4efa <__retarget_lock_release>:
   d4efa:	4770      	bx	lr

000d4efc <__retarget_lock_release_recursive>:
   d4efc:	4770      	bx	lr

000d4efe <link_code_end>:
	...

000d4f00 <dynalib_user>:
   d4f00:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d4f10:	0000 0000                                   ....

000d4f14 <_ZTVN5spark13EthernetClassE>:
	...
   d4f1c:	44cf 000d 44c5 000d 44bb 000d 44b1 000d     .D...D...D...D..
   d4f2c:	44a5 000d 4499 000d 469d 000d 46a5 000d     .D...D...F...F..
   d4f3c:	448d 000d 4485 000d 447b 000d 4471 000d     .D...D..{D..qD..
   d4f4c:	46d5 000d                                   .F..

000d4f50 <_ZTV7TwoWire>:
	...
   d4f58:	44ed 000d 4537 000d 450f 000d 44ef 000d     .D..7E...E...D..
   d4f68:	4517 000d 451f 000d 4527 000d 452f 000d     .E...E..'E../E..

000d4f78 <_ZTV9IPAddress>:
	...
   d4f80:	4579 000d 4569 000d 456b 000d 7061 0070     yE..iE..kE..app.

000d4f90 <_ZTVN5spark12NetworkClassE>:
	...
   d4f98:	465d 000d 4667 000d 4671 000d 467b 000d     ]F..gF..qF..{F..
   d4fa8:	4685 000d 4691 000d 469d 000d 46a5 000d     .F...F...F...F..
   d4fb8:	46ad 000d 46b9 000d 46c1 000d 46cb 000d     .F...F...F...F..
   d4fc8:	46d5 000d 5925 252d 2d6d 6425 2554 3a48     .F..%Y-%m-%dT%H:
   d4fd8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d4fe8 <_ZTV11USARTSerial>:
	...
   d4ff0:	48a9 000d 4917 000d 48ef 000d 47bd 000d     .H...I...H...G..
   d5000:	48bf 000d 48db 000d 48cd 000d 48e9 000d     .H...H...H...H..
   d5010:	48ab 000d 48b1 000d                         .H...H..

000d5018 <_ZTV9USBSerial>:
	...
   d5020:	49a3 000d 4a0b 000d 49e1 000d 47bd 000d     .I...J...I...G..
   d5030:	49d3 000d 49a5 000d 49b5 000d 4a05 000d     .I...I...I...J..
   d5040:	49c5 000d 499d 000d                         .I...I..

000d5048 <_ZTVN5spark9WiFiClassE>:
	...
   d5050:	4afb 000d 4af1 000d 4ae7 000d 4a9d 000d     .J...J...J...J..
   d5060:	4adb 000d 4acf 000d 469d 000d 46a5 000d     .J...J...F...F..
   d5070:	4ac3 000d 4abb 000d 4ab1 000d 4aa7 000d     .J...J...J...J..
   d5080:	46d5 000d                                   .F..

000d5084 <_ZSt7nothrow>:
	...

000d5085 <link_const_variable_data_end>:
   d5085:	00          	.byte	0x00
	...

000d5088 <link_constructors_location>:
   d5088:	000d40d9 	.word	0x000d40d9
   d508c:	000d4461 	.word	0x000d4461
   d5090:	000d44d9 	.word	0x000d44d9
   d5094:	000d464d 	.word	0x000d464d
   d5098:	000d47a9 	.word	0x000d47a9
   d509c:	000d4851 	.word	0x000d4851
   d50a0:	000d4871 	.word	0x000d4871
   d50a4:	000d4895 	.word	0x000d4895
   d50a8:	000d4b05 	.word	0x000d4b05

000d50ac <link_constructors_end>:
   d50ac:	00000000 	.word	0x00000000
